package com.achess.project1test.parser;

import com.achess.project1test.lexer.LexerP1;
import com.achess.project1test.*;

parser code {:

    public ParserP1(LexerP1 lexer){
        super(lexer);
    }
:}


terminal SEMICOLON, COLON, COMMA;
terminal LBRACE, RBRACE;
terminal LBRACKET, RBRACKET;
terminal LPAREN, RPAREN;
terminal STRING;

terminal PLUS, MINUS, DIVISION, TIMES;
terminal Double INTEGER, DECIMAL;
// Graphs definition
terminal DEF, BARRAS, PIE;
terminal TITULO, EJEX, EJEY, UNIR;
terminal ETIQUETAS, VALORES, TIPO, EXTRA, CANTIDAD, PORCENTAJE, TOTAL;

terminal EJECUTAR;


non terminal s, fin;
non terminal graph, cuerpo_barras, statement_barras, cuerpo_pie, statement_pie;
non terminal titulo;
non terminal ejex;
non terminal ejey;
non terminal unir;
non terminal etiquetas;
non terminal valores;
non terminal tipo;
non terminal total;
non terminal extra;
non terminal execute;

non terminal pie_types;

non terminal array_strings;
non terminal strings;
non terminal ArrayNode<Operation> array_operations;
non terminal ArrayNode<Operation> operations_comma;
non terminal ArrayNode<Operation[]> tuplas_comma;
non terminal Operation[] tupla;

non terminal Operation operation;
non terminal Operation factor;
non terminal Operation term;







s::= 
                        graph s
                        |execute s
                        | graph
                        | execute
                        ;

fin::= 
                        SEMICOLON
                        ;

graph::= 
                        DEF BARRAS LBRACE cuerpo_barras RBRACE
                        |DEF PIE LBRACE cuerpo_pie RBRACE
                        ;

cuerpo_barras::= 
                        statement_barras fin cuerpo_barras
                        |statement_barras fin
                        ;
statement_barras::= 
                        titulo  
                        |ejex  
                        |ejey  
                        |unir  
                        ;

titulo::= 
                        TITULO COLON STRING
                        ;
ejex::= 
                        EJEX COLON array_strings
                        ;
array_strings::= 
                        LBRACKET strings RBRACKET
                        ;
strings::= 
                        STRING
                        |STRING COMMA strings
                        ;
ejey::=
                        EJEY COLON LBRACKET operations_comma:arr RBRACKET
                        {: //System.out.println(arr);:}                        
                        ;
operations_comma::=
                        operation:o COMMA operations_comma:nexts
                        {: 
                            ArrayNode<Operation> node = new ArrayNode<Operation>(o);
                            node.setNext(nexts);
                            RESULT = node;
                        :}
                        | operation: o
                        {: 
                            ArrayNode<Operation> node = new ArrayNode<Operation>(o);
                            RESULT = node;
                        :}                        
                        ;                        
unir::=
                        UNIR COLON LBRACKET tuplas_comma:tuplas RBRACKET
                        {:
                            System.out.println(tuplas.getValue()[0]);
                            System.out.println(tuplas.getValue()[1]);
                            tuplas = tuplas.getNext();
                            System.out.println(tuplas.getValue()[0]);
                            System.out.println(tuplas.getValue()[1]);
                            
                        :}
                        ;
tuplas_comma::= 
                        tupla:tp COMMA tuplas_comma:prevs
                        {:
                            ArrayNode<Operation[]> node = new ArrayNode<Operation[]>(tp);
                            node.setNext(prevs);
                            RESULT = node;
                        :}
                        | tupla:tp
                        {:
                            ArrayNode<Operation[]> node = new ArrayNode<Operation[]>(tp);                            
                            RESULT = node;
                        :}
                        ;
tupla::=
                        LBRACE operation:x COMMA operation:y RBRACE
                        {: 
                            Operation[] array = new Operation[2];
                            array[0] = x;
                            array[1] = y;
                            RESULT = array;
                        :}
                        ;
                        
operation::=
                        operation:o PLUS term:t
                        {: RESULT=new Operation("+", o, t);:}
                        |operation:o MINUS term:t
                        {: RESULT=new Operation("-", o, t);:}
                        |term:t 
                        {:RESULT=t;:}
                        ;

term::=
                        term:t TIMES factor:f
                        {: RESULT=new Operation("*", t, f);:}
                        |term:t DIVISION factor:f
                        {: RESULT=new Operation("/", t, f);:}
                        |factor:f 
                        {: RESULT=f;:}
                        ;
factor::=
                        INTEGER:val 
                        {: RESULT=new Operation("n", val);:}
                        |DECIMAL:val
                        {: RESULT=new Operation("n", val);:}
                        |LPAREN operation:op RPAREN
                        {: RESULT=op;:}
                        | MINUS factor:op
                        {: RESULT=new Operation("minus", op, null);:}
                        ;

cuerpo_pie::=
                        statement_pie fin cuerpo_barras
                        | statement_pie fin
                        ;
statement_pie::=        
                        titulo
                        |etiquetas
                        |valores
                        |unir
                        |tipo
                        |total 
                        |extra 
                        ;                        
etiquetas::=
                        ETIQUETAS COLON array_strings
                        ;
valores::=
                        VALORES COLON array_operations
                        ;
tipo::=
                        TIPO COLON  pie_types
                        ;
pie_types::=
                        CANTIDAD
                        |PORCENTAJE
                        ;
total::=
                        TOTAL COLON operation
                        ;
extra::=
                        EXTRA COLON STRING
                        ;
execute::=
                        EJECUTAR LPAREN STRING RPAREN fin
                        ;